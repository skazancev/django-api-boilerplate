"""
Django settings for project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import logging

import environ

from .env import env

from utils.i18n import builtins_install

builtins_install()

ENVIRONMENT = env('ENVIRONMENT', default='development')
COMPANY_NAME = env('COMPANY_NAME', default='Your company')

BASE_DIR = environ.Path(__file__) - 1

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
BASE_URL_SCHEMA = env('BASE_URL_SCHEMA', default='http')
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS', default=['*'])
ADMINS = [('Stanislav', 'stas.kazancev54@gmail.com'), ]
SITE_ID = 1


# Application definition
INSTALLED_APPS = [
    'apps.AdminConfig',  # replaces 'django.contrib.admin'
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'django_json_widget',
    'rest_framework',
    'drf_yasg',
    'adminsortable',
    'django_celery_beat',
    'django_celery_results',
    'ckeditor',
    'ckeditor_uploader',
    'django_better_admin_arrayfield',
    'simple_history',
    'phonenumber_field',

    'api',
    'apps.accounts.apps.AccountsConfig',
    'apps.bots.apps.BotsConfig',
    'apps.communication.apps.CommunicationConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'utils.middleware.CustomAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            str(BASE_DIR.path('templates')),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        **env.db('DATABASE_URL', default=''),
        'ATOMIC_REQUESTS': True,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = env('STATIC_URL', default='/static/')
STATIC_ROOT = str(BASE_DIR.path('static'))

MEDIA_URL = env('MEDIA_URL', default='/media/')
MEDIA_ROOT = str(BASE_DIR.path('media'))

DYNAMIC_CHOICE_FIELD_OPTIONS_CACHE = env.int('DYNAMIC_CHOICE_FIELD_OPTIONS_CACHE', default=300)

AUTH_USER_MODEL = 'accounts.User'

CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='amqp://guest@rabbit:5672/')
CELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_TASK_ALWAYS_EAGER', default=False)
CELERY_TASK_EAGER_PROPAGATES = env.bool('CELERY_TASK_EAGER_PROPAGATES', default=True)
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['customjson']
CELERY_TASK_SERIALIZER = 'customjson'
CELERY_RESULT_SERIALIZER = 'customjson'

# CKEDITOR
CKEDITOR_UPLOAD_PATH = 'ckeditor_uploads/'
CKEDITOR_CONFIGS = {
    'default': {
        'enterMode': 2,
        'toolbar_Custom': [
            {'name': 'General', 'items': ['Source', '-', 'Undo', 'Redo']},
            {'name': 'basicstyles',
             'items': ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat']},
            {'name': 'paragraph',
             'items': ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-',
                       'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-']},
            {'name': 'links', 'items': ['Link', 'Unlink']},
            {'name': 'insert', 'items': ['Table', 'HorizontalRule', 'PageBreak']},
            '/',
            {'name': 'styles', 'items': ['Styles', 'Format', 'Font', 'FontSize']},
            {'name': 'colors', 'items': ['TextColor', 'BGColor']},
            {'name': 'tools', 'items': ['Maximize', 'ShowBlocks']},
        ],
        'toolbar': 'Custom',
    },
}

X_FRAME_OPTIONS = 'SAMEORIGIN'

SHOW_SWAGGER = env.bool('SHOW_SWAGGER', default=True)
SWAGGER_SETTINGS = {
    'LOGOUT_URL': 'admin:logout',
    'LOGIN_URL': 'admin:login',
    'JSON_EDITOR': True,
    # 'SECURITY_DEFINITIONS': {
    #     'api_key': {
    #         'type': 'apiKey',
    #         'in': 'header',
    #         'name': 'Authorization'
    #     }
    # }
}

# Email settings
# ---------------------------------------------------------------------------
USE_MAILHOG = env('USE_MAILHOG', default=False)
EMAIL_HOST = env('EMAIL_HOST', default='')
if USE_MAILHOG:
    EMAIL_PORT = 1025
    EMAIL_USE_TLS = False
else:
    EMAIL_PORT = env.int('EMAIL_PORT', default=0)
    EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
    EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', default=True)


# Sentry
# ------------------------------------------------------------------------------
SENTRY_DSN = env("SENTRY_DSN", default='')
if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration

    SENTRY_LOG_LEVEL = env.int("DJANGO_SENTRY_LOG_LEVEL", logging.INFO)
    sentry_logging = LoggingIntegration(
        level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs
        event_level=logging.ERROR,  # Send errors as events
    )

    sentry_sdk.init(
        environment=env('SENTRY_ENVIRONMENT', default=''),
        dsn=SENTRY_DSN,
        integrations=[sentry_logging, DjangoIntegration(), CeleryIntegration()],
        send_default_pii=True,
    )


# django-debug-toolbar
# ------------------------------------------------------------------------------
DEBUG_TOOLBAR = env.bool('DEBUG_TOOLBAR', default=True)
if DEBUG_TOOLBAR:
    try:
        import debug_toolbar  # noqa: F401
    except ImportError:
        DEBUG_TOOLBAR = False

    else:
        INSTALLED_APPS += ['debug_toolbar']
        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
        DEBUG_TOOLBAR_CONFIG = {
            'SHOW_TOOLBAR_CALLBACK': 'main.settings.show_toolbar',
            'SHOW_COLLAPSED': True,
        }

        def show_toolbar(request):
            # Включает DjDT для DEBUG=False
            return True


# django-restframework
# ------------------------------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api.accounts.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_METADATA_CLASS': 'api.metadata.SimpleMetadata',
}

if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] += 'rest_framework.renderers.BrowsableAPIRenderer',

# CACHES
CACHES = {
    'default': env.cache()
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SLACK
SLACK_ENABLED = env.bool('SLACK_ENABLED', default=False)
SLACK_TOKEN = env('SLACK_TOKEN', default='')

SENDGRID_ENABLED = env.bool('SENDGRID_ENABLED', default=False)
